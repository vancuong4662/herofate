#!/usr/bin/env python3
"""
Script t√°ch README.md th√†nh c√°c file markdown con
"""

import os
import re

def extract_sections_from_readme():
    """ƒê·ªçc README.md v√† t√°ch th√†nh c√°c sections"""
    
    if not os.path.exists('README.md'):
        print("‚ùå Kh√¥ng t√¨m th·∫•y README.md")
        return
    
    with open('README.md', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # T·∫°o th∆∞ m·ª•c markdown n·∫øu ch∆∞a c√≥
    os.makedirs('markdown', exist_ok=True)
    
    sections = {
        'overview': {
            'title': 'T·ªïng quan d·ª± √°n',
            'file': 'markdown/01_overview.md',
            'keywords': ['gi·ªõi thi·ªáu', 'm·ª•c ti√™u', 'c√¥ng ngh·ªá', 'c·∫•u tr√∫c']
        },
        'frontend': {
            'title': 'Frontend Architecture',
            'file': 'markdown/02_frontend.md', 
            'keywords': ['frontend', 'navigation', 'routes', 'ui', 'gml.js', 'animation']
        },
        'backend': {
            'title': 'Backend & API',
            'file': 'markdown/03_backend.md',
            'keywords': ['backend', 'api', 'database', 'flask', 'mongodb']
        },
        'game_mechanics': {
            'title': 'Game Mechanics',
            'file': 'markdown/04_game_mechanics.md',
            'keywords': ['chi·∫øn ƒë·∫•u', 'battle', 'quest', 'building', 'equipment', 'stats']
        },
        'data_structure': {
            'title': 'Data Structure',
            'file': 'markdown/05_data_structure.md',
            'keywords': ['json', 'items', 'enemies', 'dialogs', 'buildings']
        },
        'development': {
            'title': 'Development Guide',
            'file': 'markdown/06_development.md',
            'keywords': ['setup', 'installation', 'testing', 'debugging']
        }
    }
    
    # Chia n·ªôi dung theo header level
    lines = content.split('\n')
    current_section = []
    all_sections = []
    current_header = ""
    
    for line in lines:
        if line.startswith('# ') or line.startswith('## '):
            if current_section:
                all_sections.append({
                    'header': current_header,
                    'content': '\n'.join(current_section)
                })
                current_section = []
            current_header = line
        current_section.append(line)
    
    # Th√™m section cu·ªëi
    if current_section:
        all_sections.append({
            'header': current_header,
            'content': '\n'.join(current_section)
        })
    
    return all_sections

def categorize_section(header, content, categories):
    """Ph√¢n lo·∫°i section v√†o category ph√π h·ª£p"""
    header_lower = header.lower()
    content_lower = content.lower()
    
    scores = {}
    for cat_name, cat_info in categories.items():
        score = 0
        for keyword in cat_info['keywords']:
            score += header_lower.count(keyword) * 3  # Header quan tr·ªçng h∆°n
            score += content_lower.count(keyword)
        scores[cat_name] = score
    
    # Tr·∫£ v·ªÅ category c√≥ ƒëi·ªÉm cao nh·∫•t
    if max(scores.values()) > 0:
        return max(scores, key=scores.get)
    else:
        return 'overview'  # Default

def create_documentation_structure():
    """T·∫°o c·∫•u tr√∫c documentation m·ªõi"""
    
    print("üìö T√ÅCH README.MD TH√ÄNH C√ÅC FILE DOCUMENTATION")
    print("=" * 60)
    
    # ƒê·ªçc v√† ph√¢n t√≠ch README
    sections = extract_sections_from_readme()
    if not sections:
        return
    
    # ƒê·ªãnh nghƒ©a categories
    categories = {
        'overview': {
            'title': 'T·ªïng quan d·ª± √°n',
            'file': 'markdown/01_overview.md',
            'keywords': ['gi·ªõi thi·ªáu', 'm·ª•c ti√™u', 'c√¥ng ngh·ªá', 'fullstack', 'h·ªçc t·∫≠p'],
            'sections': []
        },
        'frontend': {
            'title': 'Frontend Architecture', 
            'file': 'markdown/02_frontend.md',
            'keywords': ['frontend', 'navigation', 'routes', 'ui', 'gml.js', 'animation', 'canvas', 'modal'],
            'sections': []
        },
        'backend': {
            'title': 'Backend & API',
            'file': 'markdown/03_backend.md', 
            'keywords': ['backend', 'api', 'flask', 'mongodb', 'database', 'session', 'auth'],
            'sections': []
        },
        'game_mechanics': {
            'title': 'Game Mechanics',
            'file': 'markdown/04_game_mechanics.md',
            'keywords': ['chi·∫øn ƒë·∫•u', 'battle', 'quest', 'building', 'equipment', 'stats', 'level', 'exp'],
            'sections': []
        },
        'data_structure': {
            'title': 'Data Structure', 
            'file': 'markdown/05_data_structure.md',
            'keywords': ['json', 'items', 'enemies', 'dialogs', 'buildings', 'skills', 'c·∫•u tr√∫c', 'd·ªØ li·ªáu'],
            'sections': []
        },
        'development': {
            'title': 'Development Guide',
            'file': 'markdown/06_development.md',
            'keywords': ['setup', 'installation', 'testing', 'debug', 'development', 'deploy', 'c√†i ƒë·∫∑t'],
            'sections': []
        }
    }
    
    # Ph√¢n lo·∫°i sections
    for section in sections:
        if not section['header']:
            continue
            
        category = categorize_section(section['header'], section['content'], categories)
        categories[category]['sections'].append(section)
        
        print(f"üìÑ {section['header'][:50]}... ‚Üí {categories[category]['title']}")
    
    # T·∫°o c√°c file documentation
    for cat_name, cat_info in categories.items():
        if not cat_info['sections']:
            continue
            
        content = f"# {cat_info['title']}\n\n"
        content += f"> ƒê∆∞·ª£c t√°ch ra t·ª´ README.md ch√≠nh ƒë·ªÉ d·ªÖ qu·∫£n l√Ω v√† tra c·ª©u\n\n"
        
        for section in cat_info['sections']:
            content += section['content'] + '\n\n'
        
        # Ghi file
        with open(cat_info['file'], 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"‚úÖ T·∫°o {cat_info['file']} ({len(cat_info['sections'])} sections)")
    
    # T·∫°o README m·ªõi ng·∫Øn g·ªçn
    create_new_readme(categories)
    
    # T·∫°o index file
    create_index_file(categories)

def create_new_readme(categories):
    """T·∫°o README.md m·ªõi ng·∫Øn g·ªçn"""
    
    new_readme = """# Hero Fate - Web Game Online

> **üìö Documentation ƒë√£ ƒë∆∞·ª£c t·ªï ch·ª©c l·∫°i!** Thay v√¨ m·ªôt file README d√†i 1200+ d√≤ng, gi·ªù ƒë√¢y documentation ƒë∆∞·ª£c chia th√†nh c√°c file chuy√™n bi·ªát trong th∆∞ m·ª•c `markdown/` ƒë·ªÉ d·ªÖ qu·∫£n l√Ω v√† tra c·ª©u.

## üéÆ Gi·ªõi thi·ªáu

**Hero Fate** l√† m·ªôt web game online ƒë∆°n gi·∫£n, ƒë∆∞·ª£c thi·∫øt k·∫ø nh∆∞ m·ªôt d·ª± √°n h·ªçc t·∫≠p ƒë·ªÉ h·ªçc vi√™n m·ªõi b·∫Øt ƒë·∫ßu h·ªçc l·∫≠p tr√¨nh c√≥ th·ªÉ th·ª±c h√†nh theo. Game c√≥ l·ªëi ch∆°i nh·∫π nh√†ng, g·ªìm hai ph·∫ßn ch√≠nh: **x√¢y d·ª±ng th·ªã tr·∫•n** v√† **chi·∫øn ƒë·∫•u theo l∆∞·ª£t**.

## üõ†Ô∏è C√¥ng ngh·ªá ch√≠nh

- **Backend**: Python + Flask + MongoDB
- **Frontend**: HTML/CSS/JavaScript + Custom GML.js Animation Library
- **Game Engine**: Turn-based combat + Town building mechanics
- **Authentication**: Session-based v·ªõi Flask-Login

## üìö Documentation Structure

To√†n b·ªô documentation ƒë√£ ƒë∆∞·ª£c t·ªï ch·ª©c trong th∆∞ m·ª•c `markdown/`:

"""
    
    for i, (cat_name, cat_info) in enumerate(categories.items(), 1):
        file_name = cat_info['file'].replace('markdown/', '')
        new_readme += f"- **[{cat_info['title']}]({cat_info['file']})** - {get_category_description(cat_name)}\n"
    
    new_readme += """
## üöÄ Quick Start

1. **Setup Environment**:
   ```bash
   pip install -r requirements.txt
   ```

2. **Run Application**:
   ```bash
   python app.py
   ```

3. **Access Game**:
   ```
   http://localhost:5000
   ```

## üìñ ƒê·ªçc th√™m

- üìã [Xem t·∫•t c·∫£ documentation](markdown/README.md)
- üîß [Upgrade Equipment Mechanism](markdown/UPGRADE_MECHANISM.md)
- üéØ [Development Tools & Scripts](markdown/06_development.md)

---

> **üí° Tip**: B·∫Øt ƒë·∫ßu v·ªõi [Overview](markdown/01_overview.md) ƒë·ªÉ hi·ªÉu t·ªïng quan d·ª± √°n, sau ƒë√≥ ƒë·ªçc theo th·ª© t·ª± c√°c file documentation kh√°c.
"""
    
    # Backup README c≈©
    os.rename('README.md', 'README.md.backup')
    
    # Ghi README m·ªõi
    with open('README.md', 'w', encoding='utf-8') as f:
        f.write(new_readme)
    
    print(f"‚úÖ T·∫°o README.md m·ªõi (ng·∫Øn g·ªçn)")
    print(f"üì¶ Backup README c≈©: README.md.backup")

def get_category_description(cat_name):
    """L·∫•y m√¥ t·∫£ ng·∫Øn cho t·ª´ng category"""
    descriptions = {
        'overview': 'T·ªïng quan, m·ª•c ti√™u v√† c√¥ng ngh·ªá s·ª≠ d·ª•ng',
        'frontend': 'UI/UX, routing, animation system v√† components',
        'backend': 'API design, database schema v√† authentication',
        'game_mechanics': 'Combat system, quests, buildings v√† progression',
        'data_structure': 'JSON schemas, data models v√† relationships',
        'development': 'Setup, testing, debugging v√† deployment'
    }
    return descriptions.get(cat_name, 'Documentation')

def create_index_file(categories):
    """T·∫°o file index cho th∆∞ m·ª•c markdown"""
    
    index_content = """# Documentation Index

> T·ªïng h·ª£p to√†n b·ªô documentation c·ªßa Hero Fate Web Game

## üìë Danh s√°ch Documentation

"""
    
    for i, (cat_name, cat_info) in enumerate(categories.items(), 1):
        file_name = cat_info['file'].replace('markdown/', '')
        index_content += f"### {i}. [{cat_info['title']}]({file_name})\n"
        index_content += f"{get_category_description(cat_name)}\n\n"
    
    index_content += """## üîß Tools & Utilities

- **[Upgrade Mechanism](UPGRADE_MECHANISM.md)** - Equipment upgrade system
- **[Background Removal](BACKGROUND_REMOVAL_README.md)** - AI-powered background removal tool  
- **[Sync Underscore](SYNC_UNDERSCORE_README.md)** - ƒê·ªìng b·ªô naming convention

## üìù Development Notes

- T·∫•t c·∫£ file documentation ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông t·ª´ README.md g·ªëc
- M·ªói file t·∫≠p trung v√†o m·ªôt kh√≠a c·∫°nh c·ª• th·ªÉ c·ªßa d·ª± √°n
- C·∫•u tr√∫c ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ d·ªÖ maintain v√† m·ªü r·ªông

---

> **üîÑ Last Updated**: ƒê∆∞·ª£c t·∫°o t·ª± ƒë·ªông t·ª´ script `organize_documentation.py`
"""
    
    with open('markdown/README.md', 'w', encoding='utf-8') as f:
        f.write(index_content)
    
    print(f"‚úÖ T·∫°o markdown/README.md (index file)")

def main():
    """H√†m main"""
    print("üìö TOOL T·ªî CH·ª®C L·∫†I DOCUMENTATION")
    print("=" * 60)
    
    if not os.path.exists('README.md'):
        print("‚ùå Kh√¥ng t√¨m th·∫•y README.md")
        return
    
    create_documentation_structure()
    
    print("\n" + "=" * 60)
    print("üéâ Ho√†n th√†nh t·ªï ch·ª©c l·∫°i documentation!")
    print("\nüìã K·∫øt qu·∫£:")
    print("- README.md m·ªõi: Ng·∫Øn g·ªçn, d·ªÖ ƒë·ªçc")
    print("- README.md.backup: Backup file g·ªëc")
    print("- markdown/: Th∆∞ m·ª•c ch·ª©a documentation chi ti·∫øt")
    print("- markdown/README.md: Index file")
    
if __name__ == "__main__":
    main()
